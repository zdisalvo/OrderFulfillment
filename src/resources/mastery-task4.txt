Use Cases

Order is on-time per Promise - no change
Order is delayed due to weather, new promiseCLI
Order is delayed due to package not leaving fulfillment center on time
Order is delayed because item was not available
Order is delayed because package was lost


What ways will the CS representatives use the new multiple-client PromiseDao?

CS will have synchronized promises changes from other branches and be able to pinpoint easier what went
wrong and be more accurate in their quote times.

In a few sentences, how does the PromiseDao work right now?

The PromiseDao is an object that contains a DeliveryPromiseServiceClient and an Order Manipulation
Authority Client. It adds a Promise by referencing the DPSC and the customer order ID. If it doesn't
exist it returns null.

Consider a developer unfamiliar with the Missed Promise CLI. Can you add diagrams here that will help them understand how the PromiseDao works right now?



Proposed Solution
Describe in a few sentences how your changes will satisfy the use cases you listed above. How will you enable getting promises from OFS? How will you allow new promise sources to be added easily in the future?

Out of Scope
Consider a reviewer who misunderstands this design and believes you're going to make the PromiseDao perfect. What are you not going to do?

Details
Include a UML diagram that will help clarify the changes you want to make. You can leave out classes that don't participate in the new solution, but you should leave in anything that uses your updates. For instance, even if you don't change the GetPromiseHistoryByOrderIdActivity, it's going to use the PromiseDao that you changed, so you should leave it in. Also make sure to include a link to the PlantUML source. Pro Tip: you can change a class's color by adding “#colorname” after its name! (For example, #lightgrey visually indicates that although a class is involved, it's not a major discussion point right now).

In detail, what calls will the software make, and how will it process the results? You may use a single narrative, but it should satisfy all of the use cases you described above.

What do you expect the complexity (BigO) of this solution to be, and why? Clearly define the variable(s) you're using in your BigO notation.

Potential Issues
What could go wrong with your solution? What would surprise a customer service rep who was trying to perform one of the use cases? If you can't think of anything, remove this section.

